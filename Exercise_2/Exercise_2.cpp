// Задание 2
/*Вывести на экран стих «Every hunter wants…» таким об-
разом, чтобы каждый «цвет» начинался с новой строки и 
соответствующим количеством табуляций.*/
//					Решение задания 2
/*	Задача состоит в последовательном (т. е. одна за другой) 
выводе строк, каждая из которых содержит одно слово из 
предложения «Every hunterwantsto knowwhere does pheasantsit».*/
/*	Сдвиг строки (слова) вправо осуществляется за счет та-
буляции (один символ табуляции обеспечивает один сдвиг 
вправо).*/
/*	Из управляющих символов (escape-последовательности) 
нам понадобиться символ перехода на следующую строку (\n) 
для каждой следующей строки (слова) и символ горизонталь-
ной табуляции (\t) для сдвига текста вправо.*/
/*1.Выводим строку в консоль с описанием названия про-
граммы с помощью команды cout (находится в библиотеке 
iostream, которая должна быть обязательно подключена 
перед функцией int main()) и оператора вывода <<. Для 
вывода следующей информации с новой строки исполь-
зуем символ перехода на следующую строку (\n) в конце.*/
#include <iostream>
using namespace std;
int main()
{
	cout << "Home task #2.2\n\n";
/*	Внутри сообщения «Home task #2.2\n» мы использовали 
escape-последовательность «\n » для того, чтобы после 
вывода текста Home task программа перешла на новую 
строку и следующая запись в консоли (первое слово Every
предложения «Every hunter wants to know where does pheasant
sit») соответственно выводилось с новой строки.*/
/*2.Создаем столько строк кода с командами std::cout и escape-
последовательностями «\t» в начале и «\n» в конце сооб-
щения, сколько строк необходимо вывести (7 в нашем 
примере).*/
/*2.1 Первая строка (слово Every) не должна сдвигаться, 
поэтому escape-последовательность «\t» не помещается 
в начало текста:*/
	cout << "Every" << "\n";
/*	Однако следующее слово (hunter) должно быть выве-
дено с новой строки, поэтому в конце дополнительно 
выводится escape-последовательность «\n» после опе-
ратора вывода <<.*/
/*2.2 Вторая строка сдвинута вправо на одну табуляцию, 
поэтому нам нужно в начало текстового фрагмен-
та после первого оператора вывода << поместить 
escape-последовательность «\t».*/
	cout << "\tHunter" << "\n";
/*	Аналогично предыдущему шагу для вывода, следу-
ющего слово (Wants) с новой строки в конце допол-
нительно выводится escape-последовательность «\n»
после второго оператора вывода <<.*/
/*2.3. Третья строка сдвинута вправо уже на две табуляции, 
поэтому нам нужно в начало текстового фрагмента 
после первого оператора вывода << поместить две 
escape-последовательности «\t».*/
	cout << "\t\tWants" << "\n";
/*Аналогично завершаем строку escape-последователь-
ностью «\n» после второго оператора вывода <<.*/
/*2.4. Можно заметить следующую закономерность: коли-
чество табуляций перед словом на единицу меньше 
номера слова в предложении. Значит, для вывода чет-
вертого слова необходимо добавить в начало текстового
фрагмента три символа табуляции, для вывода пятого
слова — четыре символа табуляции и т. д.*/
	cout << "\t\t\tTo khow" << "\n";
	cout << "\t\t\t\tWhere" << "\n";
	cout << "\t\t\t\t\tDoes Pheasand" << "\n";
	cout << "\t\t\t\t\t\t\tSit" << "\n\n";
	return 0;
}